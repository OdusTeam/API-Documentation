FORMAT: 1A
HOST: https://api.odus.ai/api

# Odus API
Odus API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.

## Authentication
All requiests requires authentication via `X-AUTH-TOKEN` header. You can find **API tokens** section in your [Odus](https://panel.odus.ai/) account.

## Base URL

All the URLs referenced in the documentation have the following base:

```json
https://api.odus.ai/api
```

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group Bots

In this section you will find all the methods, which you need to work with bots.

## Bots [/bots]

### List [GET]

Returns the list of all the bots, that are available for your user.

+ Response 200 (application/json)

    + Attributes (array[Bot])

# Group Clients

Clients are your direct users, your customers. Use these methods to segmentate, add or delete them.

## Bot's clients [/clients]

### List [GET]
+ Response 200 (application/json)
    + Attributes (array[Client])

### Filtered list [POST]
+ Request (application/json)
    + Attributes
        + locale: `US` (string, optional)
        + channel: `fb` (string, optional)
        + limit (number, optional)
            + Default: 20
        + offset: 0 (number, optional)
            + Default: 0

+ Response 200 (application/json)
    + Attributes (array[Client])

### Get client [GET /client/{id}]
+ Parameters
    + id: 999 (number, required) - Uniq client ID

+ Response 200 (application/json)
    + Attributes (Client)

### Delete [DELETE /client/{id}]
+ Parameters
    + id: 999 (number, required) - Uniq client ID

+ Response 200 (application/json)
    + Attributes (Client)

## Segments [/segments]

### List [GET]
+ Response 200 (application/json)
    + Attributes (array[Segment])

### Get segment [GET /segment/{id}]
+ Parameters
    + id: 1050 (number, required) - Uniq segment ID

+ Response 200 (application/json)
    + Attributes (Segment)

### Delete segment [DELETE /segment/{id}]
+ Parameters
    + id: 1050 (number, required) - Uniq segment ID

+ Response 200 (application/json)
    + Attributes (Segment)

### Add client to segment [PUT /segment/{id}/clients/add]
+ Parameters
    + id: 1050 (number, required) - Uniq segment ID

+ Request
    + Attributes
        + clientId: 999 (number, required) - Uniq client ID

+ Response 200 (application/json)
    + Attributes
        + segment (Segment)
        + client (Client)
+ Response 404 (application/json)

        {
            "status": "error",
            "error_code": "segment_not_found",
            "message": "Segment doesn't exist"
        }

+ Response 404 (application/json)

        {
            "status": "error",
            "error_code": "client_not_found",
            "message": "Client doesn't exist"
        }


## Data Structures

### Bot
+ id: 105 (number) - Uniq bot ID
+ name: `API Demo bot` (string) - Your bot's name
+ avatar: `https://panel.odus.ai/bots/81/bot_file_3b672035fbed7a9d93c691469a6a75a1.png` (string, optional) - Url of bot's avatar or null

### Client
+ id: 999 (number) - Uniq client ID
+ name: `James E. Herman` (string) - Client's name
+ locale: `US` (string, optional) - Locale code (ISO 639-1), if detected 
+ signed_up: `2014-11-11T08:40:51.620Z` (string) - Date and time, when client signed signed up 
+ last_seen:` 2014-11-11T05:30:51.620Z` (string) - Date and time, when client was online
+ segments (array[Segment]) - Client's segments
+ channels (array[Channel])

### Segment
+ id: 1050 (number) - Uniq segment ID
+ name: `Customers` (string, required) - Segment's name
+ description: `Those users who bought something at least once` (string, optional) - Description
+ users: 67 (number) - Amount of users in segment

### Channel
+ type (enum, required)
    - fb (string) - Facebook
    - tg (string) - Telegram
    - vk (string) - Vkontakte
    - wa (string) - WhatsApp
    - vox (string) - VoxImplant
    - web (string) - Web-widget or landing page-bot
+ is_configured: true (boolean, required) - Is channel configured for bot or already deleted